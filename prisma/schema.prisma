

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String?
  role       Role       @default(ADMIN)
  phone      String
  picture    String? @default("https://i.ibb.co/BmrXZ1V/my-img.jpg")
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blog  Blog[]
  project    Project[]
  skill Skill []
  education Education[]
  experience Experience[]
  resume Resume[]
}
enum Role {
    ADMIN
}
model Resume {
  id        Int      @id @default(autoincrement())
  fileUrl   String   // storage URL বা public path
  fileName  String?  // original filename (optional)
  mimeType  String?  // e.g. application/pdf
  size      Int?     // bytes
  userId    Int      
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Blog {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  thumbnail  String?
  isFeatured Boolean  @default(false)
  tags       String[]
  views      Int      @default(0)
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Project {
  id         Int      @id @default(autoincrement())
  title      String
  description    String
  thumbnail  String?
  liveLink String?
  frontendRepoLink String?
  backendRepoLink String?
  category String?
  isFeatured Boolean  @default(false)
  tags       String[]
  views      Int      @default(0)
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Skill {
  id         Int      @id @default(autoincrement())
  name       String   
  level      String?  
  category   String?  
  icon       String?  
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Education {
  id          Int      @id @default(autoincrement())
  institution String  
  degree      String   
  field       String? 
  startDate   DateTime
  endDate     DateTime?
  description String?  
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Experience {
  id          Int      @id @default(autoincrement())
  company     String  
  position    String   
  location    String? 
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false) 
  description String? 
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
